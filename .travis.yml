sudo: false

language: generic

cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack


default_build: &DEFAULT
  before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC

  # We want to always allow newer versions of packages when building on GHC HEAD
  - CABALARGS=""
  - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

    # Use the more reliable S3 mirror of Hackage
    mkdir -p $HOME/.cabal
    echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
    echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

    if [ "$CABALVER" != "1.16" ]
    then
      echo 'jobs: $ncpus' >> $HOME/.cabal/config
    fi

  install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - |
    set -ex
    case "$BUILD" in
      stack)
        stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
        ;;
      cabal)
        cabal --version
        travis_retry cabal update

        # Get the list of packages from the stack.yaml file
        PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

        cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
        ;;
    esac
    set +ex

  script:
  - |
    set -ex
    case "$BUILD" in
      stack)
        stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
        ;;
      cabal)
        cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

        ORIGDIR=$(pwd)
        for dir in $PACKAGES
        do
          cd $dir
          cabal check || [ "$CABALVER" == "1.16" ]
          cabal sdist
          PKGVER=$(cabal info . | awk '{print $2;exit}')
          SRC_TGZ=$PKGVER.tar.gz
          cd dist
          tar zxfv "$SRC_TGZ"
          cd "$PKGVER"
          cabal configure --enable-tests
          cabal build
          cabal test
          cd $ORIGDIR
        done
        ;;
    esac
    set +ex

  before_deploy:
  # Install awscli for deploy jobs
  - pip install --user awscli
  - PATH=$HOME/.local/bin:$HOME/Library/Python/2.7/bin:$PATH

  deploy:
    provider: script
    script: bin/travis_publish
    skip_cleanup: true
    on:
      branch: master

jobs:
  include:
  # The Cabal builds.
  - stage: test
    env: BUILD=cabal GHCVER=8.0.2 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7 PUBLISH=true
    compiler: ": #GHC 8.0.2"
    addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
    <<: *DEFAULT

  - stage: test
    env: BUILD=cabal GHCVER=8.2.1 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC 8.2.1"
    addons: {apt: {packages: [cabal-install-1.24,ghc-8.2.1,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
    <<: *DEFAULT

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  - stage: test
    env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
    <<: *DEFAULT

  # The Stack builds.
  - stage: test
    env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}
    <<: *DEFAULT

  # Nightly builds are allowed to fail
  - stage: test
    env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}
    <<: *DEFAULT

  # Build on macOS in addition to Linux
  - stage: test
    env: BUILD=stack ARGS="" PUBLISH=true
    compiler: ": #stack default osx"
    os: osx
    <<: *DEFAULT

  - stage: test
    env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx
    <<: *DEFAULT

  - stage: release
    if: tag IS present

    before_deploy:
    # Install awscli for deploy jobs
    - pip install --user awscli
    - PATH=$HOME/.local/bin:$HOME/Library/Python/2.7/bin:$PATH
    - ./bin/travis_before_release

    deploy:
      provider: releases
      api-key: $GITHUB_OAUTH_TOKEN
      skip_cleanup: true
      local_dir: release
      file:
      - "hgrep-x86_64-unknown-linux.tar.gz"
      - "hgrep-x86_64-apple-darwin.tar.gz"

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"
